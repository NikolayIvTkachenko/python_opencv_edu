
import numpy as np

# #2 3
#
# str=input()
# nl=np.array(list(map(int, str.split())))
# print(nl)
# s = (nl[0], nl[1])
# str_np=np.zeros(s, dtype=float)
# print(str_np)

# Создаем массив
arr = np.array([1, 2, 3, 4, 5])

# Прибавление скаляра
add_scalar = arr + 10
print("Прибавление 10:", add_scalar)  # Вывод: [11 12 13 14 15]

# Вычитание скаляра
sub_scalar = arr - 2
print("Вычитание 2:", sub_scalar)  # Вывод: [-1  0  1  2  3]

# Умножение на скаляр
mul_scalar = arr * 3
print("Умножение на 3:", mul_scalar)  # Вывод: [ 3  6  9 12 15]

# Деление на скаляр
div_scalar = arr / 2
print("Деление на 2:", div_scalar)  # Вывод: [0.5 1.  1.5 2.  2.5]

# Создаем массив
arr = np.array([10, 20, 30, 40, 45])

# Прибавляем 30 с ограничением до 50
add_with_limit = np.clip(arr + 30, None, 50)
print("Прибавляем 30 с ограничением до 50:", add_with_limit)  # Вывод: [40 50 50 50 50]

# np.clip(arr + 30, None, 50): функция np.clip используется для ограничения значений массива. Она принимает три аргумента:
#
# Первый аргумент — это массив значений, которые нужно ограничить.
# Второй аргумент  — минимальное значение, до которого нужно ограничить значения массива. Если None, то нижняя граница не устанавливается.
# Третий аргумент — максимальное значение, до которого нужно ограничить значения массива. Если None, то верхняя граница не устанавливается.
# В данном случае, все значения в массиве, которые больше 50, будут заменены на 50.

import numpy as np

# Создаем массив
arr = np.array([1, 2, 3, 4, 5])

# Сумма всех элементов массива
total_sum = np.sum(arr)
print("Сумма всех элементов массива:", total_sum)  # Вывод: 15

import numpy as np

# Создаем двумерный массив (матрицу)
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Суммирование всех элементов матрицы
total_sum = np.sum(matrix)
print("Сумма всех элементов матрицы:", total_sum)  # Вывод: 45

# Суммирование по столбцам (axis=0)
sum_columns = np.sum(matrix, axis=0)
print("Суммирование по столбцам:", sum_columns)  # Вывод: [12 15 18]

# Суммирование по строкам (axis=1)
sum_rows = np.sum(matrix, axis=1)
print("Суммирование по строкам:", sum_rows)  # Вывод: [ 6 15 24]

# В этом примере:
#
# np.sum(matrix) суммирует все элементы матрицы.
# np.sum(matrix, axis=0) суммирует элементы по столбцам. В результате получается одномерный массив, где каждый элемент является суммой соответствующего столбца исходной матрицы.
# np.sum(matrix, axis=1) суммирует элементы по строкам. В результате получается одномерный массив, где каждый элемент является суммой соответствующей строки исходной матрицы.

# Создаем массив
arr = np.array([1, 2, 3, 4, 5])

# Среднее значение всех элементов массива
mean_value = np.mean(arr)
print("Среднее значение всех элементов массива:", mean_value)  # Вывод: 3.0
import numpy as np

# Создаем два массива
arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([10, 20, 30, 40, 50])

# Сложение
sum_arr = arr1 + arr2
print("Сложение:", sum_arr)  # Вывод: [11 22 33 44 55]

# Вычитание
diff_arr = arr1 - arr2
print("Вычитание:", diff_arr)  # Вывод: [-9 -18 -27 -36 -45]

# Умножение
prod_arr = arr1 * arr2
print("Умножение:", prod_arr)  # Вывод: [ 10  40  90 160 250]

# Деление
quot_arr = arr1 / arr2
print("Деление:", quot_arr)  # Вывод: [0.1 0.1 0.1 0.1 0.1]


# Создаем массив
arr = np.array([1, 4, 9, 16, 25])

# Квадратный корень
sqrt_arr = np.sqrt(arr)
print("Квадратный корень:", sqrt_arr)  # Вывод: [1. 2. 3. 4. 5.]

# Экспонента
exp_arr = np.exp(arr)
print("Экспонента:", exp_arr)  # Вывод: [2.71828183e+00 5.45981500e+01 8.10308393e+03 8.88611052e+06 7.20048993e+10]

# Синус
sin_arr = np.sin(arr)
print("Синус:", sin_arr)  # Вывод: [ 0.84147098 -0.7568025   0.41211849 -0.28790332 -0.13235175]

# Создаем массив
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])

# Условие: элементы, которые больше 5
condition = arr > 5

# Применяем операцию (умножаем на 2) только к выбранным элементам
arr[condition] = arr[condition] * 2
print("Массив после умножения элементов > 5 на 2:", arr)  # Вывод: [1 2 3 4 5 12 14 16 18]


# Создаем массив
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])

# Условие: элементы, которые больше 5
indices = np.where(arr > 5)

# Применяем операцию (умножаем на 2) только к выбранным элементам
arr[indices] = arr[indices] * 2
print("Массив после умножения элементов > 5 на 2 с использованием np.where:", arr)  # Вывод: [1 2 3 4 5 12 14 16 18]

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
result = arr[arr % 2 == 0]
print(result)  # Вывод: [2 4 6 8]

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
indices = np.where(arr % 2 == 0)
print(indices)  # Вывод: (array([1, 3, 5, 7]),)

# Применение операции
arr[indices] = arr[indices] * 2
print(arr)  # Вывод: [ 1  4  3  8  5 12  7 16  9]

