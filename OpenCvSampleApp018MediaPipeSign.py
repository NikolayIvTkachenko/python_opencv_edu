# Обработка жестов
# Обработка жестов — это важная задача в компьютерном зрении, которая позволяет распознавать и интерпретировать
# действия пользователя на основе движения или положения рук. Жесты могут быть использованы для управления устройствами,
# взаимодействия с приложениями, игр и многих других целей.
#
# В этом уроке мы рассмотрим несколько способов определения жестов.
#
# Обработка жестов на основе оценки расстояний
# Этот метод использует координаты ключевых точек руки и вычисление расстояний между ними. На основе этих расстояний
# можно идентифицировать простые жесты, такие как "щелчок", "ладонь вверх", "кулак" и т.д.
#
# Принцип работы
# Извлечение координат ключевых точек:
#
# Используются координаты (x,y)
# (x,y) точек руки (например, запястье, кончики пальцев и суставы).
# Координаты могут быть получены из системы трекинга, например, MediaPipe Hands или других библиотек.
#
# Вычисление
# расстояний:
#
# На
# основе
# координат
# вычисляются
# расстояния
# между
# определёнными
# парами
# точек.
# Используется
# формула
# Евклидова
# расстояния:

# Анализ относительных расстояний:
#
# Устанавливаются пороги для определённых расстояний.
# Например, расстояние между точками
# 0
# 0 и
# 1
# 1 (по классификации MediaPipe) рассматривается, как эталонное, и на его основе анализируются расстояния между другими точками
# Классификация жестов:
#
# На основе вычисленных расстояний и их комбинаций принимается решение о жесте.
# Начнем с примера распознавания жеста "Раскрытая ладонь":
# Идея
# Для распознавания жеста "Раскрытая ладонь" используется оценка расстояний между ключевыми точками руки. В открытой ладони:
#
# Расстояние между кончиком большого пальца и запястьем велико.
# Кончики пальцев находятся на значительном расстоянии друг от друга.
# Расстояние от кончиков пальцев до запястья примерно одинаковое.

import cv2
import numpy as np
import mediapipe as mp
import math

# Инициализация MediaPipe
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=1)

# Захват видеопотока
cap = cv2.VideoCapture(0)

def calculate_distance(point1, point2):
    """Вычисляет евклидово расстояние между двумя точками."""
    return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5

def classify_gesture(distances):
    """Классифицирует жест на основе расстояний."""
    thumb_to_index = distances["pair_0"]  # Большой палец и указательный
    thumb_to_wrist = distances["pair_3"]  # Большой палец и запястье
    pinky_to_wrist = distances["pair_2"]  # Мизинец и запястье

    # Раскрытая ладонь
    if (
        thumb_to_index > 100 and  # Большой палец далеко от указательного
        thumb_to_wrist > 150 and  # Большой палец далеко от запястья
        pinky_to_wrist > 150  # Мизинец далеко от запястья
    ):
        return "Открытая ладонь"

    # Кулак
    if (
        thumb_to_index < 100 and
        thumb_to_wrist < 150 and
        pinky_to_wrist < 150
    ):
        return "Кулак"

    return "Неизвестный жест"

while True:
    read_ok, frame = cap.read()
    if not read_ok:
        break

    frame = cv2.flip(frame, 1)
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(frame_rgb)

    if results.multi_hand_landmarks:
        for hand_landmark in results.multi_hand_landmarks:
            h, w, c = frame.shape

            # Преобразуем ключевые точки в список координат
            landmarks = [
                (int(landmark.x * w), int(landmark.y * h)) for landmark in hand_landmark.landmark
            ]

            # Определение пар точек для анализа расстояний
            pair_indices = [
                (4, 8),  # Большой палец и указательный
                (0, 12),  # Запястье и средний палец
                (20, 0),  # Мизинец и запястье
                (0, 4)  # Запястье и большой палец
            ]

            # Генерация пар точек
            pairs = {f"pair_{i}": (landmarks[p1], landmarks[p2]) for i, (p1, p2) in enumerate(pair_indices)}

            # Вычисляем расстояния для каждой пары
            distances = {
                pair_name: calculate_distance(pair[0], pair[1])
                for pair_name, pair in pairs.items()
            }

            # Классифицируем жест
            gesture = classify_gesture(distances)

            # Визуализация текста
            cv2.putText(frame, f"Жест: {gesture}", (10, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)

            # Визуализация расстояний
            for pair_name, (point1, point2) in pairs.items():
                cv2.line(frame, point1, point2, (255, 0, 0), 2)  # Линия между точками
                cv2.circle(frame, point1, 5, (0, 255, 0), -1)  # Первая точка
                cv2.circle(frame, point2, 5, (0, 255, 0), -1)  # Вторая точка
                midpoint = ((point1[0] + point2[0]) // 2, (point1[1] + point2[1]) // 2)
                cv2.putText(frame, f"{int(distances[pair_name])}", midpoint, cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 255, 255), 1)

    cv2.imshow("Hand Gesture Detection", frame)

    # Выход по клавише Esc
    if cv2.waitKey(30) == 27:
        break

cap.release()
cv2.destroyAllWindows()


# В данном примере определён один жест — "Открытая ладонь".Код состоит из нескольких функций, с вычисление расстояний
# мы уже работали ранее, теперь подробно рассмотрим функцию - классификатор жестов classify_gesture:


# def classify_gesture(distances):
#     """Классифицирует жест на основе расстояний."""
#     thumb_to_index = distances["pair_0"]  # Большой палец и указательный
#     thumb_to_wrist = distances["pair_3"]  # Большой палец и запястье
#     pinky_to_wrist = distances["pair_2"]  # Мизинец и запястье
#
#     # Раскрытая ладонь
#     if (
#             thumb_to_index > 100 and  # Большой палец далеко от указательного
#             thumb_to_wrist > 150 and  # Большой палец далеко от запястья
#             pinky_to_wrist > 150  # Мизинец далеко от запястья
#     ):
#         return "Открытая ладонь"
#
#     return "Неизвестный жест"

# Что делает:
# Принимает словарь distances, где ключи — это пары точек, а значения — их расстояния.
# Сравнивает расстояния с заранее заданными пороговыми значениями.
# Возвращает название жеста в виде строки.
# Как добавить новые жесты:
# Определите, какие расстояния уникальны для нового жеста.
#
# Укажите диапазоны расстояний для нового жеста.
#
# Добавим распознавание жеста "Кулак" (все пальцы согнуты)