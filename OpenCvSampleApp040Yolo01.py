# Введение в YOLOv11
# Что такое YOLO (You Only Look Once)?
# YOLO — это одна из самых популярных архитектур нейросетей для задачи детекции объектов на изображениях и в
# видео. Отличительной особенностью является подход, при котором вся задача решается за один проход через нейросеть.
# В отличие от других методов, таких как R-CNN, где используется несколько этапов, YOLO сразу предсказывает координаты
# объектов и классы для всех объектов на изображении.
#
# Официальная документация
#
# Принцип работы:
#
# Изображение делится на сетку (например, 13x13 для изображения 640x640).
# Каждая ячейка сетки предсказывает границы объектов (bounding box), их классы и вероятность.
# Это позволяет YOLO работать быстро, что делает его подходящим для реального времени и обработки видео.

# https://docs.ultralytics.com/ru/models/yolo11/#overview

# Особенности YOLOv11
# YOLOv11 — это последняя версия нейросети на 2025 год, которая включает в себя несколько значительных улучшений по
# сравнению с предыдущими версиями:
#
# Точность и скорость: YOLOv11 предлагает высокую точность при меньших затратах вычислительных ресурсов.
# Это достигается за счет улучшенной архитектуры и новейших методов обучения.
# Поддержка различных архитектур: YOLOv11 эффективно работает как на процессорах, так и на GPU, используя ускорение
# через CUDA для обработки больших объемов данных.
# Поддержка разных форматов входных данных: YOLOv11 может работать с изображениями разных разрешений и даже видеофайлами.
# Обучение на разметке COCO: В этой версии используются усовершенствованные методы обработки разметки и модели, обученные
# на наборе данных COCO, что позволяет достигать хороших результатов на разнообразных изображениях.


# На каких данных обучается YOLOv11?
# YOLOv11 обучается на нескольких популярных наборах данных, включая:
#
# COCO (Common Objects in Context): Один из самых известных наборов данных для задач детекции объектов, который включает
# 80 классов (например, люди, автомобили, животные и т. д.).
# На каких данных обучается YOLOv11?
# YOLOv11 обучается на нескольких популярных наборах данных, включая:
# https://docs.ultralytics.com/ru/datasets/detect/coco/
#
# COCO (Common Objects in Context): Один из самых известных наборов данных для задач детекции объектов, который включает 80 классов (например, люди, автомобили, животные и т. д.).
# VOC (PASCAL Visual Object Classes): Еще один набор данных, содержащий 20 классов объектов.
# Custom datasets: В курсе мы покажем, как можно обучить модель на своих данных, используя свои метки и изображения.
# Как работает YOLOv11?
# Основная идея YOLO заключается в том, что она предсказывает для каждой ячейки сетки два набора выходных данных:
# https://docs.ultralytics.com/ru/datasets/detect/voc/
# Координаты ограничивающих рамок (bounding boxes) для объектов (x, y, ширина, высота).
# Вероятности классов для каждого объекта, что позволяет классифицировать объекты на изображении.
# Модель учится предсказывать эти данные, минимизируя ошибку на выходных значениях с использованием кросс-энтропии для классификации и среднеквадратичной ошибки для локализации объектов.
# VOC (PASCAL Visual Object Classes): Еще один набор данных, содержащий 20 классов объектов.
# Custom datasets: В курсе мы покажем, как можно обучить модель на своих данных, используя свои метки и изображения.
# Как работает YOLOv11?
# Основная идея YOLO заключается в том, что она предсказывает для каждой ячейки сетки два набора выходных данных:
#
# Координаты ограничивающих рамок (bounding boxes) для объектов (x, y, ширина, высота).
# Вероятности классов для каждого объекта, что позволяет классифицировать объекты на изображении.
# Модель учится предсказывать эти данные, минимизируя ошибку на выходных значениях с использованием
# кросс-энтропии для классификации и среднеквадратичной ошибки для локализации объектов.
#
# https://docs.ultralytics.com/ru/datasets/detect/coco/
# https://docs.ultralytics.com/ru/datasets/detect/voc/

# ------------------------------------
# ------------------------------------
# ------------------------------------
#
# Установка YOLOv11
# Для установки YOLOv11 вам нужно выполнить несколько шагов:
#
# Установка через pip
# Для начала установите нужные зависимости через pip. Это самый быстрый и простой способ:
#
# pip install ultralytics
#
# После этого, вы сможете использовать библиотеку для работы с YOLOv11.
#
# Установка из репозитория
# Если вам нужно больше настроек или вы хотите внести изменения в исходный код, можно клонировать репозиторий с GitHub
# и установить необходимые зависимости:
#
# git clone https://github.com/ultralytics/yolov11.git
# cd yolov11
# pip install -U -r requirements.txt
# Загрузка предобученной модели
# YOLOv11 предоставляет предобученные модели, которые можно использовать сразу для тестирования.
# Загрузить их можно следующим образом:
#
# Установка YOLOv11
# Для установки YOLOv11 вам нужно выполнить несколько шагов:
#
# Установка через pip
# Для начала установите нужные зависимости через pip. Это самый быстрый и простой способ:
#
# pip install ultralytics
#
# После этого, вы сможете использовать библиотеку для работы с YOLOv11.
#
# Установка из репозитория
# Если вам нужно больше настроек или вы хотите внести изменения в исходный код, можно клонировать репозиторий
# с GitHub и установить необходимые зависимости:
#
# git clone https://github.com/ultralytics/yolov11.git
# cd yolov11
# pip install -U -r requirements.txt
# Загрузка предобученной модели
# YOLOv11 предоставляет предобученные модели, которые можно использовать сразу для тестирования. Загрузить
# их можно следующим образом:
#
# Скачать файл с официального сайта
#
# Выполнить подключение модели прямо из кода (при этом файл модели будет скачан автоматически:
#
# from ultralytics import YOLO
#
# # Загрузка модели
# model = YOLO("yolo11n.pt")
#
# # Детекция объектов на изображении
# results = model("street.png", save=True)
# Настройка для работы с GPU
# Для ускорения вычислений рекомендуется использовать GPU. Убедитесь, что у вас установлен CUDA и PyTorch
# с поддержкой GPU. Чтобы проверить, что PyTorch использует GPU:
#
# import torch
# print(torch.cuda.is_available())
# Если выводится True, то можно использовать GPU для инференса.

from ultralytics import YOLO

# Загрузка модели
model = YOLO("yolo11n.pt")

# Детекция объектов на изображении
results = model("street04.jpg", save=True)



