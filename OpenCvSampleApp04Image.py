# Обрезка изображений
# В этом уроке мы изучим различные методы обрезки изображений с использованием OpenCV.
# Вы научитесь обрезать изображения по различным критериям, использовать маски и применять
# аффинные и перспективные преобразования для обрезки. Мы также рассмотрим, как обрезать изображения
# по заданным формам и как автоматизировать процесс обрезки.
#
# Обрезка изображений широко используется в различных областях, таких как:
#
# Подготовка данных: Обрезка изображений для обучения нейронных сетей.
# Обработка изображений: Удаление ненужных частей изображения, чтобы улучшить его визуальное восприятие.
# Компьютерное зрение: Извлечение интересующих областей для анализа.
# Фотография: Создание миниатюр и предпросмотров изображений.
# В OpenCV обрезка изображений осуществляется с использованием NumPy.
# Изображение представляется в виде многомерного массива, и обрезка выполняется путем выбора
# подмассива с нужными координатами.
#
# Координаты обрезки задаются в формате (y1:y2, x1:x2), где (x1, y1) — координаты верхнего
# левого угла, а (x2, y2) — координаты нижнего правого угла.
#
# Cрезы мы изучали совсем не просто так:)

# import cv2
# import numpy as np
#
# # Загрузка изображения
# image = cv2.imread('example.png')
#
# # Координаты обрезки
# x1, y1 = 180, 0
# x2, y2 = 415, 375
#
# # Обрезка изображения
# cropped_image = image[y1:y2, x1:x2]
#
# # Показать изображение
# cv2.imshow('Cropped Image', cropped_image)
# cv2.waitKey(0)
# cv2.destroyAllWindows()

# Обрезка с использованием мыши
# В этом шаге мы научимся использовать мышь для интерактивного выбора области обрезки изображения. OpenCV предоставляет функции для обработки событий мыши, которые позволяют нам отслеживать действия пользователя (например, нажатие и перемещение мыши) и использовать их для выбора области обрезки.
#
# Для обработки событий мыши в OpenCV используется функция cv2.setMouseCallback(). Эта функция связывает окно с функцией обратного вызова, которая вызывается при каждом событии мыши в этом окне.
#
# Нужно отметить, что обработка этих событий возможна только на компьютере, т.к. в проверяющей системе Stepik и Google Colab нет возможности работы функций cv2.imshow() и cv2.setMouseCallback()
#
# Основные типы событий мыши
# cv2.EVENT_LBUTTONDOWN — нажатие левой кнопки мыши.
# cv2.EVENT_LBUTTONUP — отпускание левой кнопки мыши.
# cv2.EVENT_RBUTTONDOWN — нажатие правой кнопки мыши.
# cv2.EVENT_RBUTTONUP — отпускание правой кнопки мыши.
# cv2.EVENT_MOUSEMOVE — перемещение мыши.
# cv2.EVENT_MOUSEWHEEL - вращение скролла. Направление вращение определяется значением переменной flags.

# import cv2
#
# # Функция обработки событий мыши
# def mouse_callback(event, x, y, flags, param):
#     if event == cv2.EVENT_LBUTTONDOWN:
#         print(f"Left button down at ({x}, {y})")
#     elif event == cv2.EVENT_LBUTTONUP:
#         print(f"Left button up at ({x}, {y})")
#     elif event == cv2.EVENT_RBUTTONDOWN:
#         print(f"Right button down at ({x}, {y})")
#     elif event == cv2.EVENT_RBUTTONUP:
#         print(f"Right button up at ({x}, {y})")
#     elif event == cv2.EVENT_MBUTTONDOWN:
#         print(f"Middle button down at ({x}, {y})")
#     elif event == cv2.EVENT_MBUTTONUP:
#         print(f"Middle button up at ({x}, {y})")
#     elif event == cv2.EVENT_MOUSEMOVE:
#         print(f"Mouse move at ({x}, {y})")
#     elif event == cv2.EVENT_MOUSEWHEEL:
#         print(f"Mouse wheel at ({x}, {y}) with flags {flags}")
#
# # Загрузка изображения
# img = cv2.imread('example.png')
# cv2.imshow('image', img)
#
# # Установка функции обратного вызова
# cv2.setMouseCallback('image', mouse_callback)
#
# cv2.waitKey(0)
# cv2.destroyAllWindows()

