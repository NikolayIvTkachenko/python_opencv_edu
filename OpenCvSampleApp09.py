# Использование каскадов Хаара в OpenCV
# В этом уроке мы углубимся в тему каскадов Хаара, изучим их работу, преимущества и недостатки, а также научимся
# использовать их для распознавания объектов, таких как лица и глаза, на изображениях и видео.
#
# Каскады Хаара — это метод обнаружения объектов, который использует алгоритм на основе функций Хаара, разработанный
# Полом Вьола и Майклом Джонсом в 2001 году. Этот метод стал популярен благодаря своей высокой скорости работы и
# возможностям обработки изображений в реальном времени.
#
# Основные принципы работы каскадов Хаара:
# Функции Хаара: Представляют собой черно-белые прямоугольные шаблоны, используемые для выделения особенностей
# изображения. Каждая функция Хаара представляет собой разницу между суммами пикселей светлых и темных областей.
#
# Интегральное изображение: Это специальное представление изображения, позволяющее быстро вычислять сумму
# пикселей в любой прямоугольной области изображения, что значительно ускоряет процесс вычисления функций Хаара.
#
# Каскад классификаторов: Последовательность последовательных классификаторов, каждый из которых
# отбрасывает области изображения, не содержащие объект. Благодаря этому каскады Хаара могут быстро отсеивать
# неподходящие области изображения.
#
# Преимущества и недостатки каскадов Хаара
# Преимущества:
#
# Каскады Хаара эффективны и могут работать в реальном времени.
# Легко использовать в OpenCV с помощью предобученных моделей.
# Недостатки:
#
# Каскады Хаара не всегда точны в условиях, когда освещение или угол съемки сильно отличаются от условий,
# на которых они были обучены. Метод может давать ложные срабатывания, особенно при изменении освещения и угла
# наклона объекта.
# 2. Как работают каскады Хаара
# Этапы работы
# Обучение:
#
# Создание классификатора путем обучения на большом наборе положительных (содержат объект) и отрицательных
# (не содержат объект) образцов.
# В процессе обучения классификатор учится распознавать специфические особенности объекта (например, лица).
# Обнаружение:
#
# Применение обученного каскада к изображению для обнаружения объектов.
# Каскад проверяет различные области изображения, постепенно отсекая те, которые не содержат объект.
# Интегральное изображение
# Интегральное изображение позволяет быстро вычислять суммы пикселей в прямоугольной области. Этот
# метод значительно ускоряет процесс вычисления функций Хаара и делает возможным их применение в реальном времени.
#
# Пример кода для вычисления интегрального изображения:

# import cv2
# import numpy as np
#
# # Загрузка изображения
# image = cv2.imread('example00.png', 0)  # Загружаем изображение в градациях серого
#
# # Вычисление интегрального изображения
# integral_image = cv2.integral(image)
#
# # Отображение оригинального и интегрального изображений
# cv2.imshow('Original', image)
# cv2.imshow('Integral Image', integral_image.astype(np.uint8))  # Для отображения нужно привести к uint8
# cv2.waitKey(0)
# cv2.destroyAllWindows()

import cv2

# Загрузка предобученного каскада для распознавания лиц
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Загрузка изображения
image = cv2.imread('example00.png')
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Обнаружение лиц
faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

# Рисование прямоугольников вокруг обнаруженных лиц
for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x+w, y+h), (255, 0, 0), 2)

# Отображение результата
cv2.imshow('Faces found', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
#
# А теперь, волшебство, меняем строчку на другие каскады,  и у вас уже детектор множества объектов!
#
# face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
# Каскады для распознавания лиц
# haarcascade_frontalface_default.xml - Этот каскад используется для распознавания лиц, ориентированных
# фронтально к камере.
# haarcascade_frontalface_alt.xml - Альтернативный каскад для распознавания лиц, который может лучше работать в определенных
# условиях освещения или углов наклона головы.
# haarcascade_frontalface_alt2.xml - Еще один альтернативный каскад для распознавания лиц, который может быть
# более точным в некоторых ситуациях по сравнению с `haarcascade_frontalface_default.xml`
# haarcascade_profileface.xml - Каскад для распознавания лиц в профиль. Этот каскад эффективен для распознавания
# лиц, которые повернуты боком к камере.
# Каскады для распознавания глаз и выражений лица
# haarcascade_eye.xml - Каскад для распознавания глаз. Часто используется в комбинации с каскадами для
# распознавания лиц для идентификации глаз внутри лица. Т.к. может находить глаза, там где их нет.

# haarcascade_eye_tree_eyeglasses.xml - Каскад для распознавания глаз, который также может распознавать глаза людей,
# носящих очки. Этот каскад может быть полезен в ситуациях, когда обычный каскад `haarcascade_eye.xml` не работает.
# haarcascade_lefteye_2splits.xml - Каскад для распознавания левого глаза. Может быть использован в задачах, требующих
# распознавания отдельных глаз.
# haarcascade_righteye_2splits.xml - Каскад для распознавания правого глаза, аналогичен каскаду для левого глаза.
# Каскад для распознавания российских автомобильных номеров
# haarcascade_russian_plate_number.xml - Каскад для распознавания номеров российских автомобилей. Может быть
# использован в системах, требующих точного распознавания автомобильных номеров.

# Распознавание текста с использованием OpenCV и EasyOCR
# Научимся распознавать текст на изображении
#
#
#
# Задача распознавания текста:
#
# Распознавание текста на изображениях предполагает извлечение символов и их последующую интерпретацию в текстовый формат.
# Применение распознавания текста может варьироваться от распознавания текста на документах до автоматического распознавания автомобильных номеров.
# 2. Предобработка изображения
# Цель предобработки:
#
# Подготовить изображение к распознаванию текста, улучшив его контраст и четкость.
# Основные методы:
#
# Преобразование в градации серого: Уменьшает количество данных, которые нужно обрабатывать, оставляя только важную информацию о яркости.
# Бинаризация: Преобразование изображения в черно-белое, что улучшает качество распознавания текста.
# Удаление шума: Удаление мелких артефактов, которые могут мешать распознаванию.
# import cv2
#
# # Загрузка изображения
# image = cv2.imread('text.png')
# gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#
# # Увеличение контраста с помощью адаптивной бинаризации
# adaptive_thresh = cv2.adaptiveThreshold(gray_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
#
# # Удаление шума с помощью размытия
# blurred_image = cv2.medianBlur(adaptive_thresh, 3)
#
# cv2.imwrite('preproc_text.png', blurred_image)



# 3. Оптическое распознавание символов (OCR)
# EasyOCR: Простая в использовании библиотека для распознавания текста, поддерживающая множество языков, включая русский и английский.
#
# import pandas as pd
# import easyocr
# import cv2
#
# # Загрузка изображения
# image = cv2.imread('plate.png')
# gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#
# # Увеличение контраста с помощью адаптивной бинаризации
# adaptive_thresh = cv2.adaptiveThreshold(gray_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
#
# # Удаление шума с помощью размытия
# blurred_image = cv2.medianBlur(adaptive_thresh, 3)
#
# reader = easyocr.Reader(['ru','en'])
# result = reader.readtext(blurred_image,paragraph="False")
# df=pd.DataFrame(result)
# print(df[1])
#
# #Вывод: 0    Привет Hello
# Применение распознавания текста в реальных задачах
# Автоматическое распознавание номерных знаков (ANPR): Используется в системах контроля доступа, платных дорогах и парковках.
# Обработка документов: Распознавание текста на сканированных документах для автоматической обработки информации.
# Мобильные приложения: Распознавание текста в реальном времени для различных целей, от перевода до управления финансами.
# Задания для самостоятельной работы:
#
# Используйте EasyOCR для распознавания текста на изображении автомобильного номера, загруженном ранее.
# Попробуйте улучшить предобработку изображений для достижения более высокой точности распознавания.
# Создайте свою собственную предобработку изображений, чтобы улучшить распознавание текста в сложных условиях.
# Например, когда автомобильный номер находится под углом. Нужно вырезать только область номера. Ведь вы умеете находить
# края и прямоугольники на изображении?